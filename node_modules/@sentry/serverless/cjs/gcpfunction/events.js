Object.defineProperty(exports, '__esModule', { value: true });

const Sentry = require('@sentry/node');
const utils$1 = require('@sentry/utils');
const utils = require('../utils.js');

/**
 * Wraps an event function handler adding it error capture and tracing capabilities.
 *
 * @param fn Event handler
 * @param options Options
 * @returns Event handler
 */
function wrapEventFunction(
  fn,
  wrapOptions = {},
) {
  return utils.proxyFunction(fn, f => utils.domainify(_wrapEventFunction(f, wrapOptions)));
}

/** */
function _wrapEventFunction(
  fn,
  wrapOptions = {},
) {
  const options = {
    flushTimeout: 2000,
    ...wrapOptions,
  };
  return (...eventFunctionArguments) => {
    const [data, context, callback] = eventFunctionArguments;

    const hub = Sentry.getCurrentHub();

    const transaction = hub.startTransaction({
      name: context.eventType,
      op: 'function.gcp.event',
      metadata: { source: 'component' },
    });

    // getCurrentHub() is expected to use current active domain as a carrier
    // since functions-framework creates a domain for each incoming request.
    // So adding of event processors every time should not lead to memory bloat.
    hub.configureScope(scope => {
      scope.setContext('gcp.function.context', { ...context });
      // We put the transaction on the scope so users can attach children to it
      scope.setSpan(transaction);
    });

    const activeDomain = utils.getActiveDomain(); // eslint-disable-line @typescript-eslint/no-non-null-assertion

    const newCallback = activeDomain.bind((...args) => {
      if (args[0] !== null && args[0] !== undefined) {
        Sentry.captureException(args[0]);
      }
      transaction.finish();

      void Sentry.flush(options.flushTimeout)
        .then(null, e => {
          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils$1.logger.error(e);
        })
        .then(() => {
          if (typeof callback === 'function') {
            callback(...args);
          }
        });
    });

    if (fn.length > 2) {
      let fnResult;
      try {
        fnResult = (fn )(data, context, newCallback);
      } catch (err) {
        Sentry.captureException(err);
        throw err;
      }

      if (utils$1.isThenable(fnResult)) {
        fnResult.then(null, err => {
          Sentry.captureException(err);
          throw err;
        });
      }

      return fnResult;
    }

    return Promise.resolve()
      .then(() => (fn )(data, context))
      .then(
        result => newCallback(null, result),
        err => newCallback(err, undefined),
      );
  };
}

exports.wrapEventFunction = wrapEventFunction;
//# sourceMappingURL=events.js.map
