{"version":3,"file":"awslambda.js","sources":["../../../src/awslambda.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Scope } from '@sentry/node';\nimport * as Sentry from '@sentry/node';\nimport { captureException, captureMessage, flush, getCurrentHub, withScope } from '@sentry/node';\nimport type { Integration } from '@sentry/types';\nimport {\n  baggageHeaderToDynamicSamplingContext,\n  dsnFromString,\n  dsnToString,\n  extractTraceparentData,\n  isString,\n  logger,\n} from '@sentry/utils';\n// NOTE: I have no idea how to fix this right now, and don't want to waste more time, as it builds just fine â€” Kamil\n// eslint-disable-next-line import/no-unresolved\nimport type { Context, Handler } from 'aws-lambda';\nimport { existsSync } from 'fs';\nimport { hostname } from 'os';\nimport { basename, resolve } from 'path';\nimport { performance } from 'perf_hooks';\nimport { types } from 'util';\n\nimport { AWSServices } from './awsservices';\nimport { serverlessEventProcessor } from './utils';\n\nexport * from '@sentry/node';\n\nconst { isPromise } = types;\n\n// https://www.npmjs.com/package/aws-lambda-consumer\ntype SyncHandler<T extends Handler> = (\n  event: Parameters<T>[0],\n  context: Parameters<T>[1],\n  callback: Parameters<T>[2],\n) => void;\n\nexport type AsyncHandler<T extends Handler> = (\n  event: Parameters<T>[0],\n  context: Parameters<T>[1],\n) => Promise<NonNullable<Parameters<Parameters<T>[2]>[1]>>;\n\nexport interface WrapperOptions {\n  flushTimeout: number;\n  // TODO: DEPRECATED - remove `rethrowAfterCapture` in v7\n  rethrowAfterCapture?: boolean;\n  callbackWaitsForEmptyEventLoop: boolean;\n  captureTimeoutWarning: boolean;\n  timeoutWarningLimit: number;\n  /**\n   * Capture all errors when `Promise.allSettled` is returned by the handler\n   * The {@link wrapHandler} will not fail the lambda even if there are errors\n   * @default false\n   */\n  captureAllSettledReasons: boolean;\n}\n\nexport const defaultIntegrations: Integration[] = [...Sentry.defaultIntegrations, new AWSServices({ optional: true })];\n\n/**\n * Changes a Dsn to point to the `relay` server running in the Lambda Extension.\n *\n * This is only used by the serverless integration for AWS Lambda.\n *\n * @param originalDsn The original Dsn of the customer.\n * @returns Dsn pointing to Lambda extension.\n */\nfunction extensionRelayDSN(originalDsn: string | undefined): string | undefined {\n  if (originalDsn === undefined) {\n    return undefined;\n  }\n\n  const dsn = dsnFromString(originalDsn);\n  dsn.host = 'localhost';\n  dsn.port = '5333';\n  dsn.protocol = 'http';\n\n  return dsnToString(dsn);\n}\n\ninterface AWSLambdaOptions extends Sentry.NodeOptions {\n  /**\n   * Internal field that is set to `true` when init() is called by the Sentry AWS Lambda layer.\n   *\n   */\n  _invokedByLambdaLayer?: boolean;\n}\n\n/**\n * @see {@link Sentry.init}\n */\nexport function init(options: AWSLambdaOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n\n  options._metadata = options._metadata || {};\n  options._metadata.sdk = {\n    name: 'sentry.javascript.serverless',\n    integrations: ['AWSLambda'],\n    packages: [\n      {\n        name: 'npm:@sentry/serverless',\n        version: Sentry.SDK_VERSION,\n      },\n    ],\n    version: Sentry.SDK_VERSION,\n  };\n\n  // If invoked by the Sentry Lambda Layer point the SDK to the Lambda Extension (inside the layer) instead of the host\n  // specified in the DSN\n  if (options._invokedByLambdaLayer) {\n    options.dsn = extensionRelayDSN(options.dsn);\n  }\n\n  Sentry.init(options);\n  Sentry.addGlobalEventProcessor(serverlessEventProcessor);\n}\n\n/** */\nfunction tryRequire<T>(taskRoot: string, subdir: string, mod: string): T {\n  const lambdaStylePath = resolve(taskRoot, subdir, mod);\n  if (existsSync(lambdaStylePath) || existsSync(`${lambdaStylePath}.js`)) {\n    // Lambda-style path\n    return require(lambdaStylePath);\n  }\n  // Node-style path\n  return require(require.resolve(mod, { paths: [taskRoot, subdir] }));\n}\n\n/** */\nfunction isPromiseAllSettledResult<T>(result: T[]): boolean {\n  return result.every(\n    v =>\n      Object.prototype.hasOwnProperty.call(v, 'status') &&\n      (Object.prototype.hasOwnProperty.call(v, 'value') || Object.prototype.hasOwnProperty.call(v, 'reason')),\n  );\n}\n\ntype PromiseSettledResult<T> = { status: 'rejected' | 'fulfilled'; reason?: T };\n\n/** */\nfunction getRejectedReasons<T>(results: PromiseSettledResult<T>[]): T[] {\n  return results.reduce((rejected: T[], result) => {\n    if (result.status === 'rejected' && result.reason) rejected.push(result.reason);\n    return rejected;\n  }, []);\n}\n\n/** */\nexport function tryPatchHandler(taskRoot: string, handlerPath: string): void {\n  type HandlerBag = HandlerModule | Handler | null | undefined;\n\n  interface HandlerModule {\n    [key: string]: HandlerBag;\n  }\n\n  const handlerDesc = basename(handlerPath);\n  const match = handlerDesc.match(/^([^.]*)\\.(.*)$/);\n  if (!match) {\n    __DEBUG_BUILD__ && logger.error(`Bad handler ${handlerDesc}`);\n    return;\n  }\n\n  const [, handlerMod, handlerName] = match;\n\n  let obj: HandlerBag;\n  try {\n    const handlerDir = handlerPath.substring(0, handlerPath.indexOf(handlerDesc));\n    obj = tryRequire(taskRoot, handlerDir, handlerMod);\n  } catch (e) {\n    __DEBUG_BUILD__ && logger.error(`Cannot require ${handlerPath} in ${taskRoot}`, e);\n    return;\n  }\n\n  let mod: HandlerBag;\n  let functionName: string | undefined;\n  handlerName.split('.').forEach(name => {\n    mod = obj;\n    obj = obj && (obj as HandlerModule)[name];\n    functionName = name;\n  });\n  if (!obj) {\n    __DEBUG_BUILD__ && logger.error(`${handlerPath} is undefined or not exported`);\n    return;\n  }\n  if (typeof obj !== 'function') {\n    __DEBUG_BUILD__ && logger.error(`${handlerPath} is not a function`);\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  (mod as HandlerModule)[functionName!] = wrapHandler(obj);\n}\n\n/**\n * Tries to invoke context.getRemainingTimeInMillis if not available returns 0\n * Some environments use AWS lambda but don't support this function\n * @param context\n */\nfunction tryGetRemainingTimeInMillis(context: Context): number {\n  return typeof context.getRemainingTimeInMillis === 'function' ? context.getRemainingTimeInMillis() : 0;\n}\n\n/**\n * Adds additional information from the environment and AWS Context to the Sentry Scope.\n *\n * @param scope Scope that should be enhanced\n * @param context AWS Lambda context that will be used to extract some part of the data\n * @param startTime performance.now() when wrapHandler was invoked\n */\nfunction enhanceScopeWithEnvironmentData(scope: Scope, context: Context, startTime: number): void {\n  scope.setTransactionName(context.functionName);\n\n  scope.setTag('server_name', process.env._AWS_XRAY_DAEMON_ADDRESS || process.env.SENTRY_NAME || hostname());\n  scope.setTag('url', `awslambda:///${context.functionName}`);\n\n  scope.setContext('aws.lambda', {\n    aws_request_id: context.awsRequestId,\n    function_name: context.functionName,\n    function_version: context.functionVersion,\n    invoked_function_arn: context.invokedFunctionArn,\n    execution_duration_in_millis: performance.now() - startTime,\n    remaining_time_in_millis: tryGetRemainingTimeInMillis(context),\n    'sys.argv': process.argv,\n  });\n\n  scope.setContext('aws.cloudwatch.logs', {\n    log_group: context.logGroupName,\n    log_stream: context.logStreamName,\n    url: `https://console.aws.amazon.com/cloudwatch/home?region=${\n      process.env.AWS_REGION\n    }#logsV2:log-groups/log-group/${encodeURIComponent(context.logGroupName)}/log-events/${encodeURIComponent(\n      context.logStreamName,\n    )}?filterPattern=\"${context.awsRequestId}\"`,\n  });\n}\n\n/**\n * Wraps a lambda handler adding it error capture and tracing capabilities.\n *\n * @param handler Handler\n * @param options Options\n * @returns Handler\n */\nexport function wrapHandler<TEvent, TResult>(\n  handler: Handler<TEvent, TResult>,\n  wrapOptions: Partial<WrapperOptions> = {},\n): Handler<TEvent, TResult> {\n  const START_TIME = performance.now();\n  const options: WrapperOptions = {\n    flushTimeout: 2000,\n    callbackWaitsForEmptyEventLoop: false,\n    captureTimeoutWarning: true,\n    timeoutWarningLimit: 500,\n    captureAllSettledReasons: false,\n    ...wrapOptions,\n  };\n  let timeoutWarningTimer: NodeJS.Timeout;\n\n  // AWSLambda is like Express. It makes a distinction about handlers based on its last argument\n  // async (event) => async handler\n  // async (event, context) => async handler\n  // (event, context, callback) => sync handler\n  // Nevertheless whatever option is chosen by user, we convert it to async handler.\n  const asyncHandler: AsyncHandler<typeof handler> =\n    handler.length > 2\n      ? (event, context) =>\n          new Promise((resolve, reject) => {\n            const rv = (handler as SyncHandler<typeof handler>)(event, context, (error, result) => {\n              if (error === null || error === undefined) {\n                resolve(result!); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n              } else {\n                reject(error);\n              }\n            }) as unknown;\n\n            // This should never happen, but still can if someone writes a handler as\n            // `async (event, context, callback) => {}`\n            if (isPromise(rv)) {\n              void (rv as Promise<NonNullable<TResult>>).then(resolve, reject);\n            }\n          })\n      : (handler as AsyncHandler<typeof handler>);\n\n  return async (event, context) => {\n    context.callbackWaitsForEmptyEventLoop = options.callbackWaitsForEmptyEventLoop;\n\n    // In seconds. You cannot go any more granular than this in AWS Lambda.\n    const configuredTimeout = Math.ceil(tryGetRemainingTimeInMillis(context) / 1000);\n    const configuredTimeoutMinutes = Math.floor(configuredTimeout / 60);\n    const configuredTimeoutSeconds = configuredTimeout % 60;\n\n    const humanReadableTimeout =\n      configuredTimeoutMinutes > 0\n        ? `${configuredTimeoutMinutes}m${configuredTimeoutSeconds}s`\n        : `${configuredTimeoutSeconds}s`;\n\n    // When `callbackWaitsForEmptyEventLoop` is set to false, which it should when using `captureTimeoutWarning`,\n    // we don't have a guarantee that this message will be delivered. Because of that, we don't flush it.\n    if (options.captureTimeoutWarning) {\n      const timeoutWarningDelay = tryGetRemainingTimeInMillis(context) - options.timeoutWarningLimit;\n\n      timeoutWarningTimer = setTimeout(() => {\n        withScope(scope => {\n          scope.setTag('timeout', humanReadableTimeout);\n          captureMessage(`Possible function timeout: ${context.functionName}`, 'warning');\n        });\n      }, timeoutWarningDelay) as unknown as NodeJS.Timeout;\n    }\n\n    // Applying `sentry-trace` to context\n    let traceparentData;\n    const eventWithHeaders = event as { headers?: { [key: string]: string } };\n    if (eventWithHeaders.headers && isString(eventWithHeaders.headers['sentry-trace'])) {\n      traceparentData = extractTraceparentData(eventWithHeaders.headers['sentry-trace']);\n    }\n\n    const baggageHeader = eventWithHeaders.headers && eventWithHeaders.headers.baggage;\n    const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggageHeader);\n\n    const hub = getCurrentHub();\n\n    const transaction = hub.startTransaction({\n      name: context.functionName,\n      op: 'function.aws.lambda',\n      ...traceparentData,\n      metadata: {\n        dynamicSamplingContext: traceparentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n        source: 'component',\n      },\n    });\n\n    const scope = hub.pushScope();\n    let rv: TResult;\n    try {\n      enhanceScopeWithEnvironmentData(scope, context, START_TIME);\n      // We put the transaction on the scope so users can attach children to it\n      scope.setSpan(transaction);\n      rv = await asyncHandler(event, context);\n\n      // We manage lambdas that use Promise.allSettled by capturing the errors of failed promises\n      if (options.captureAllSettledReasons && Array.isArray(rv) && isPromiseAllSettledResult(rv)) {\n        const reasons = getRejectedReasons(rv);\n        reasons.forEach(exception => {\n          captureException(exception);\n        });\n      }\n    } catch (e) {\n      captureException(e);\n      throw e;\n    } finally {\n      clearTimeout(timeoutWarningTimer);\n      transaction.finish();\n      hub.popScope();\n      await flush(options.flushTimeout).catch(e => {\n        __DEBUG_BUILD__ && logger.error(e);\n      });\n    }\n    return rv;\n  };\n}\n"],"names":["types","AWSServices","dsnFromString","dsnToString","serverlessEventProcessor","resolve","existsSync","basename","logger","hostname","performance","withScope","captureMessage","isString","extractTraceparentData","baggageHeaderToDynamicSamplingContext","getCurrentHub","captureException","flush"],"mappings":"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"}